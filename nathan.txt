def get_chart_data(ubr_level):
    # Retrieve the dataset for the specified UBR level
    if ubr_level in ubr_level_datasets:
        chart_data = ubr_level_datasets[ubr_level].copy()

        # Assign hierarchy rank based on corporate title
        chart_data['Hierarchy Rank'] = chart_data['Worker Corporate Title'].map(title_hierarchy)

        # Ensure all "Organization Manager Employee ID" entries are present
        org_manager_ids = chart_data['Organization Manager Employee ID'].unique()
        missing_managers = [mgr_id for mgr_id in org_manager_ids if mgr_id != "Unknown" and mgr_id not in chart_data['Employee ID'].values]

        # Fetch missing manager data from the original filtered_df
        if missing_managers:
            missing_manager_data = filtered_df[filtered_df['Employee ID'].isin(missing_managers)]
            chart_data = pd.concat([chart_data, missing_manager_data], ignore_index=True)

        # Replace NaN values with placeholders
        chart_data.fillna({
            "Employee ID": "Unknown",
            "Preferred name": "Not Available",
            "Email - Work": "No Email Provided",
            "Worker Corporate Title": "No Title",
            "Location Address - City": "Unknown City",
            "Cost Center Name": "Not Assigned",
            "Organization Manager": "No Manager",
            "Organization Manager Employee ID": "Unknown",
            "Organization Manager Email": "No Email",
            "Matrix Manager": "No Matrix Manager",
        }, inplace=True)

        # Remove rows with any missing data
        chart_data.dropna(inplace=True)

        # Sort by rank to process the hierarchy in the correct order
        chart_data.sort_values(by='Hierarchy Rank', inplace=True)

        # Explicitly structure each record with all columns in the JSON response
        simplified_data = [
            {
                "Employee ID": item["Employee ID"],
                "Preferred name": item["Preferred name"],
                "Email - Work": item["Email - Work"],
                "Worker Corporate Title": item["Worker Corporate Title"],
                "Location Address - City": item["Location Address - City"],
                "Hierarchy Rank": item["Hierarchy Rank"],
                "Cost Center Name": item["Cost Center Name"],
                "Organization Manager": item["Organization Manager"],
                "Organization Manager Employee ID": item["Organization Manager Employee ID"],
                "Organization Manager Email": item["Organization Manager Email"],
                "Matrix Manager": item["Matrix Manager"]
            }
            for item in chart_data.to_dict(orient="records")
        ]

        return simplified_data
    else:
        return jsonify({"error": "UBR Level not found"}), 404
   